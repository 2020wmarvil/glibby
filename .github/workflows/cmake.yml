name: CMake build, test, and generate docs

on:
  pull_request:
  push:
    branches: [main, actions-dev]

env:
  BUILD_TYPE: Release

jobs:
  build_and_test:
    runs-on: [ubuntu-latest] ##${{matrix.os}}
    ##strategy:
    ##  matrix:
    ##    os: [windows-latest, ubuntu-latest] #, macOS-latest]

    name: Build and Test
    steps:
    - uses: actions/checkout@v1
    - uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
        vulkan-query-version: 1.3.204.0
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true 
    
    - name: Install Dependencies
      run:   |
        if [ "$RUNNER_OS" == "Linux" ]; then
             sudo apt update
             sudo apt install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev
        #elif [ "$RUNNER_OS" == "Windows" ]; then
        #     choco install important_windows_software
        #else
        #     echo "$RUNNER_OS not supported"
        #     exit 1
        fi
      shell: bash
   
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DGLIBBY_BUILD_RENDERER=ON -DGLIBBY_BUILD_EXAMPLES=ON -DGLIBBY_BUILD_DOCS=OFF 
      
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE

  build_docs:
    runs-on: ubuntu-latest

    name: Build Docs and Deploy to Pages
    steps:    
    - uses: actions/checkout@v1
    
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y doxygen

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DGLIBBY_BUILD_RENDERER=OFF -DGLIBBY_BUILD_EXAMPLES=OFF -DGLIBBY_BUILD_DOCS=ON 
      
    - name: Build glibby_docs
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target glibby_docs

    - name: Execute Doxygen
      shell: bash
      run: |
        doxygen build/docs/Doxyfile
        cp -TR build/docs/html $GITHUB_WORKSPACE
        echo "look!"
        ls
        echo "look!"

    - name: Create Fresh gh-pages Branch
      uses: dawidd6/action-delete-branch@v3
      with:
        github_token: ${{ secrets.GLIBBY_ACCESS_TOKEN_PAGES_DEPLOYMENT }}
        branches: gh-pages
    
    - name: Create fresh gh-pages branch
      uses: peterjgrainger/action-create-branch@v2.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GLIBBY_ACCESS_TOKEN_PAGES_DEPLOYMENT }}
      with:
        branch: 'gh-pages'

    - name: Checkout new gh-pages branch
      uses: actions/checkout@v2
      with:
          ref: gh-pages
          fetch-depth: 1

    - name: Delete folders
      run:   |
         ls docs
         find . ! -./docs u ! -./docs p -maxdepth 1 -type f -delete
         ls
      shell: bash

      ## run doxygen
      ## copy dox files to docs/html
      ## delete everything except docs
