name: CMake

on: [push, fork]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest] #, macOS-latest]

    steps:
    - uses: actions/checkout@v1

    -name: Prepare Vulkan SDK
     uses: humbletim/setup-vulkan-sdk@v1.2.0
     with:
       vulkan-query-version: 1.3.204.0
       vulkan-components: Vulkan-Headers, Vulkan-Loader
       vulkan-use-cache: true
    
    - name:  Install dependencies
      run:   |
         if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt update
              sudo apt install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev
         #elif [ "$RUNNER_OS" == "Windows" ]; then
         #     choco install important_windows_software
         #else
         #     echo "$RUNNER_OS not supported"
         #     exit 1
         fi
      shell: bash
   
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE   
      
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build. You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
